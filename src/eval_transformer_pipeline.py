# –∫–æ–¥ —Å –∑–∞–ø—É—Å–∫–æ–º –∏ –∑–∞–º–µ—Ä–æ–º –∫–∞—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞
# src/eval_transformer_pipeline.py

"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞ distilgpt2
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤, –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏, –∑–∞–º–µ—Ä ROUGE –º–µ—Ç—Ä–∏–∫
"""

from transformers import pipeline
from rouge_score import rouge_scorer
import pandas as pd
from pathlib import Path
from tqdm import tqdm

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from eval_lstm import evaluate_rouge, show_examples
except ImportError:
    # Fallback —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    def evaluate_rouge(predictions, targets):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ ROUGE –º–µ—Ç—Ä–∏–∫"""
        scorer = rouge_scorer.RougeScorer(['rouge1', 'rouge2'], use_stemmer=True)
        rouge1_scores = [scorer.score(t, p)['rouge1'].fmeasure for p, t in zip(predictions, targets)]
        rouge2_scores = [scorer.score(t, p)['rouge2'].fmeasure for p, t in zip(predictions, targets)]
        return sum(rouge1_scores)/len(rouge1_scores), sum(rouge2_scores)/len(rouge2_scores)
    
    def show_examples(predictions, num_examples=3):
        """–ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
        for i, (prompt, generated, target) in enumerate(predictions[:num_examples]):
            print(f"–ü—Ä–∏–º–µ—Ä {i+1}:")
            print(f"–í—Ö–æ–¥: '{prompt}'")
            print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: '{generated}'")
            print(f"–û–∂–∏–¥–∞–ª–æ—Å—å: '{target}'\n")


class TransformerEvaluator:
    """–û—Ü–µ–Ω—â–∏–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–Ω–æ–π –º–æ–¥–µ–ª–∏ distilgpt2"""
    
    def __init__(self, model_name="distilgpt2"):
        self.generator = pipeline("text-generation", model=model_name)
        print(f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    def load_data(self, split="val"):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞–ø–∫–∏ data/"""
        data_path = Path(__file__).parent.parent / 'data' / f'{split}.csv'
        df = pd.read_csv(data_path)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º cleaned_text –∏–ª–∏ text
        text_col = 'cleaned_text' if 'cleaned_text' in df.columns else 'text'
        texts = [str(t) for t in df[text_col] if isinstance(t, str) and len(t.split()) >= 8]
        
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(texts)} —Ç–µ–∫—Å—Ç–æ–≤")
        return texts
    
    def prepare_pairs(self, texts, num_samples=100):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä (–≤—Ö–æ–¥, —Ü–µ–ª—å) - –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–µ—Ç–≤–µ—Ä—Ç—å"""
        pairs = []
        for text in texts[:num_samples]:
            words = text.split()
            if len(words) >= 10:
                split_point = int(len(words) * 0.75)  # –ë–µ—Ä–µ–º 75% –∫–∞–∫ –≤—Ö–æ–¥
                input_text = ' '.join(words[:split_point])
                target_text = ' '.join(words[split_point:])
                pairs.append((input_text, target_text))
        return pairs
    
    def generate_text(self, prompt, **kwargs):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
        result = self.generator(prompt, **kwargs)[0]["generated_text"]
        return result[len(prompt):].strip() if result.startswith(prompt) else result
    
    def evaluate(self, text_pairs, **gen_kwargs):
        """–ü–æ–ª–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ —Å ROUGE –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        predictions = []
        targets = []
        
        for prompt, target in tqdm(text_pairs, desc="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è"):
            generated = self.generate_text(prompt, **gen_kwargs)
            if generated:
                predictions.append(generated)
                targets.append(target)
        
        rouge1, rouge2 = evaluate_rouge(predictions, targets)
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –ø–æ–∫–∞–∑–∞
        examples = [(p, g, t) for (p, t), g in zip(text_pairs, predictions)]
        
        return {
            'rouge1': rouge1,
            'rouge2': rouge2,
            'examples': examples,
            'num_samples': len(predictions)
        }
    
    def tune_parameters(self, text_pairs, param_grid):
        """–ü–æ–¥–±–æ—Ä –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        best_score = 0
        best_params = None
        
        for params in param_grid:
            results = self.evaluate(text_pairs[:20], **params)  # –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞
            if results['rouge1'] > best_score:
                best_score = results['rouge1']
                best_params = params
        
        return best_params, best_score


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∫–∏"""
    print("üöÄ –û—Ü–µ–Ω–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–Ω–æ–π –º–æ–¥–µ–ª–∏ distilgpt2")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    evaluator = TransformerEvaluator()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    texts = evaluator.load_data("val")
    text_pairs = evaluator.prepare_pairs(texts, 100)
    
    # –°–µ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞
    param_grid = [
        {'max_length': 30, 'do_sample': True, 'top_k': 50, 'temperature': 0.7},
        {'max_length': 40, 'do_sample': True, 'top_k': 50, 'temperature': 0.8},
        {'max_length': 50, 'do_sample': True, 'top_k': 50, 'temperature': 0.9},
        {'max_length': 30, 'do_sample': False},  # greedy decoding
    ]
    
    # –ü–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    best_params, best_score = evaluator.tune_parameters(text_pairs, param_grid)
    print(f"üéØ –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {best_params}")
    print(f"ROUGE-1: {best_score:.4f}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    print("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞...")
    results = evaluator.evaluate(text_pairs, **best_params)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ {results['num_samples']} samples:")
    print(f"ROUGE-1: {results['rouge1']:.4f}")
    print(f"ROUGE-2: {results['rouge2']:.4f}")
    
    # –ü—Ä–∏–º–µ—Ä—ã
    print("\nüìù –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
    show_examples(results['examples'], 3)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–∫ –≤ –ø—Ä–æ–º—Ç–µ
    print("\nüé≤ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
    test_prompt = "I think that artificial intelligence"
    result = evaluator.generator(test_prompt, max_length=20, do_sample=True, top_k=50)
    print(f"–í—Ö–æ–¥: '{test_prompt}'")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: '{result[0]['generated_text']}'")


if __name__ == "__main__":
    main()